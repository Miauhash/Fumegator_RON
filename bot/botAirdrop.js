// botAirdrop.js (Vers√£o Final convertida para Ronin/Ethers.js)
require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const { PrismaClient } = require('@prisma/client');
const { ethers } = require('ethers'); // Adicionado Ethers.js para transa√ß√µes

const prisma = new PrismaClient();

// --- CONFIGURA√á√ÉO ---
const AIRDROP_CHANNEL_ID = '1410711671516692490'; // <<< ID do canal agora est√° aqui
const RONIN_ADDRESS_REGEX = /^ronin:[a-fA-F0-9]{40}$/i; // <<< Regex para carteiras Ronin
// --------------------

// --- Valida√ß√£o das Vari√°veis de Ambiente ---
if (!process.env.DISCORD_BOT_TOKEN || !process.env.SAIGON_RPC_URL || !process.env.MINTER_PRIVATE_KEY || !process.env.NEXT_PUBLIC_NFT_CONTRACT_ADDRESS) {
    console.error("ERRO FATAL: Uma ou mais vari√°veis de ambiente essenciais n√£o foram definidas. Verifique seu arquivo .env");
    process.exit(1);
}

// --- Configura√ß√£o da Conex√£o com a Blockchain (Ethers.js) ---
const provider = new ethers.JsonRpcProvider(process.env.SAIGON_RPC_URL);
const signerWallet = new ethers.Wallet(process.env.MINTER_PRIVATE_KEY, provider);

// ABI m√≠nima para a fun√ß√£o de transfer√™ncia de um NFT (padr√£o ERC-721)
const NFT_CONTRACT_ABI = [
  "function safeTransferFrom(address from, address to, uint256 tokenId)"
];

const nftContract = new ethers.Contract(process.env.NEXT_PUBLIC_NFT_CONTRACT_ADDRESS, NFT_CONTRACT_ABI, signerWallet);

// --- Configura√ß√£o do Cliente Discord ---
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

client.once('ready', async () => {
    console.log(`Bot de Airdrop '${client.user.tag}' est√° online!`);
    console.log(`Conectado como: ${signerWallet.address}`);
    console.log(`Vigiando o canal de Airdrop: ${AIRDROP_CHANNEL_ID}`);
    const balance = await provider.getBalance(signerWallet.address);
    console.log(`Saldo da carteira do bot: ${ethers.formatEther(balance)} RON`);
});

client.on('messageCreate', async message => {
    if (message.author.bot || message.channel.id !== AIRDROP_CHANNEL_ID) {
        return;
    }

    const userInput = message.content.trim();
    
    // <<< Valida√ß√£o de carteira Ronin >>>
    if (!RONIN_ADDRESS_REGEX.test(userInput)) {
        message.reply("Endere√ßo de carteira Ronin inv√°lido. Por favor, envie o endere√ßo completo, come√ßando com `ronin:`.").then(msg => {
            setTimeout(() => { try { msg.delete(); message.delete(); } catch(e) {} }, 10000);
        });
        return;
    }
    
    // Converte o endere√ßo ronin:.. para 0x... para ser usado na transa√ß√£o
    const userWalletAddress = userInput.replace('ronin:', '0x');

    let feedbackMessage = await message.reply("Processando seu pedido... ‚è≥");

    try {
        const existingClaim = await prisma.airdropClaim.findFirst({
            where: { userWallet: userWalletAddress },
        });

        if (existingClaim) {
            feedbackMessage.edit(`‚ùå Erro: A carteira \`${userInput}\` j√° recebeu um airdrop.`);
            return;
        }

        const availableNft = await prisma.nftMintPool.findFirst({
            where: { isMinted: false },
            orderBy: { id: 'asc' },
        });

        if (!availableNft) {
            feedbackMessage.edit("‚ùå Desculpe, todos os NFTs do airdrop j√° foram distribu√≠dos!");
            return;
        }
        
        // O tokenId do NFT. Assumindo que o `id` no seu banco de dados corresponde ao `tokenId`.
        const tokenIdToTransfer = availableNft.id;
        
        feedbackMessage.edit(`Encontramos o Especialista #${tokenIdToTransfer}. Enviando para sua carteira... üöö`);

        // <<< L√ìGICA DE TRANSFER√äNCIA ATUALIZADA PARA RONIN/ETHERS >>>
        const tx = await nftContract.safeTransferFrom(signerWallet.address, userWalletAddress, tokenIdToTransfer);
        
        console.log(`Enviando NFT #${tokenIdToTransfer} para ${userWalletAddress}. Hash: ${tx.hash}`);
        await tx.wait(); // Espera a transa√ß√£o ser confirmada na blockchain

        await prisma.$transaction([
            prisma.nftMintPool.update({
                where: { id: availableNft.id },
                data: { isMinted: true, mintedTo: userWalletAddress, mintedAt: new Date() },
            }),
            prisma.airdropClaim.create({
                data: {
                    userWallet: userWalletAddress,
                    // O campo nftMintAddress √© legado de Solana, mas vamos preench√™-lo com o tokenId por consist√™ncia
                    nftMintAddress: tokenIdToTransfer.toString(), 
                    nftId: availableNft.id,
                },
            }),
        ]);
        
        // <<< Link do explorer atualizado para Saigon Testnet >>>
        const explorerLink = `https://saigon-app.roninchain.com/token/${process.env.NEXT_PUBLIC_NFT_CONTRACT_ADDRESS}/instance/${tokenIdToTransfer}`;
        feedbackMessage.edit(`‚úÖ Sucesso! O Especialista #${tokenIdToTransfer} foi enviado. Bem-vindo ao Hospital Fumegator!\n\nVeja seu NFT: ${explorerLink}`);

    } catch (error) {
        console.error("Erro no processo de airdrop:", error);
        feedbackMessage.edit(`‚ùå Ocorreu um erro inesperado. A equipe de desenvolvimento j√° foi notificada.`);
    }
});

client.login(process.env.DISCORD_BOT_TOKEN);